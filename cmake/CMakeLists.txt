cmake_minimum_required(VERSION 3.5.0)

project(UltraVNC LANGUAGES C CXX RC)

set(CMAKE_CXX_STANDARD 14)
if (MINGW)
    set(CMAKE_C_FLAGS "-Wno-write-strings")
    set(CMAKE_CXX_FLAGS "-Wno-write-strings -Wno-conversion-null")
endif()
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    add_compile_definitions("_CRT_SECURE_NO_WARNINGS")
    add_compile_definitions("_WINSOCK_DEPRECATED_NO_WARNINGS")
    add_compile_definitions("NOMINMAX")
    set(CMAKE_MFC_FLAG 2)
endif()
if( ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64" OR ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "AMD64" )
    add_compile_definitions("_X64")
endif()

option(asan "Build with address sanitizer enabled.")
if (asan)
    add_compile_options(-fsanitize=address)
    add_link_options(-fsanitize=address)
    install(FILES "c:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.40.33807/bin/Hostx64/x64/clang_rt.asan_dynamic-x86_64.dll" DESTINATION ${CMAKE_BINARY_DIR}/ultravnc OPTIONAL)
endif()

if (MINGW)
    install(FILES /usr/lib/gcc/x86_64-w64-mingw32/13-win32/libstdc++-6.dll DESTINATION ${CMAKE_BINARY_DIR}/ultravnc OPTIONAL)
    install(FILES /usr/lib/gcc/x86_64-w64-mingw32/13-win32/libgcc_s_seh-1.dll DESTINATION ${CMAKE_BINARY_DIR}/ultravnc OPTIONAL)
endif()

add_subdirectory(authadmin)
add_subdirectory(authSSP)
add_subdirectory(createpassword)
add_subdirectory(ldapauth)
add_subdirectory(ldapauth9x)
add_subdirectory(ldapauthnt4)
add_subdirectory(libomnithread)
add_subdirectory(librdr)
add_subdirectory(libudt4)
add_subdirectory(libudtcloud)
add_subdirectory(libzip32)
add_subdirectory(libzipunzip)
add_subdirectory(logging)
add_subdirectory(logmessages)
add_subdirectory(MSLogonACL)
add_subdirectory(repeater)
#add_subdirectory(SecureVNCPlugin) # Not publicly available.
add_subdirectory(setcad)
add_subdirectory(setpasswd)
add_subdirectory(testauth)
add_subdirectory(uvnc_settings)
add_subdirectory(uvnckeyboardhelper)
add_subdirectory(vnchooks)
add_subdirectory(vncviewer)
add_subdirectory(winvnc)
add_subdirectory(workgrpdomnt4)
